/*!
   * RETINA
*/ // Видалив, оскільки в картинок немає альтернативних варіантів для ретина дисплеїв
"use strict"; function arrayify(a) { return Array.prototype.slice.call(a) } function chooseCap(a) { var b = parseInt(a, 10); return environment < b ? environment : b } function forceOriginalDimensions(a) { return a.hasAttribute("data-no-resize") || (0 === a.offsetWidth && 0 === a.offsetHeight ? (a.setAttribute("width", a.naturalWidth), a.setAttribute("height", a.naturalHeight)) : (a.setAttribute("width", a.offsetWidth), a.setAttribute("height", a.offsetHeight))), a } function setSourceIfAvailable(a, b) { var c = a.nodeName.toLowerCase(), d = document.createElement("img"); d.addEventListener("load", function () { "img" === c ? forceOriginalDimensions(a).setAttribute("src", b) : a.style.backgroundImage = "url(" + b + ")" }), d.setAttribute("src", b), a.setAttribute(processedAttr, !0) } function dynamicSwapImage(a, b) { var c = arguments.length <= 2 || void 0 === arguments[2] ? 1 : arguments[2], d = chooseCap(c); if (b && d > 1) { var e = b.replace(srcReplace, "@" + d + "x$1"); setSourceIfAvailable(a, e) } } function manualSwapImage(a, b, c) { environment > 1 && setSourceIfAvailable(a, c) } function getImages(a) { return a ? "function" == typeof a.forEach ? a : arrayify(a) : "undefined" != typeof document ? arrayify(document.querySelectorAll(selector)) : [] } function cleanBgImg(a) { return a.style.backgroundImage.replace(inlineReplace, "$2") } function retina(a) { getImages(a).forEach(function (a) { if (!a.getAttribute(processedAttr)) { var b = "img" === a.nodeName.toLowerCase(), c = b ? a.getAttribute("src") : cleanBgImg(a), d = a.getAttribute("data-rjs"), e = !isNaN(parseInt(d, 10)); e ? dynamicSwapImage(a, c, d) : manualSwapImage(a, c, d) } }) } Object.defineProperty(exports, "__esModule", { value: !0 }); var hasWindow = "undefined" != typeof window, environment = hasWindow ? window.devicePixelRatio || 1 : 1, srcReplace = /(\.[A-z]{3,4}\/?(\?.*)?)$/, inlineReplace = /url\(('|")?([^\)'"]+)('|")?\)/i, selector = "[data-rjs]", processedAttr = "data-rjs-processed"; hasWindow && (window.addEventListener("load", retina), window.retinajs = retina), exports.default = retina;

